// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7kHHtmp7kw7v5e6mQsr6wa
// Component: E4_3fcJKstM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import Ornament from "../../Ornament"; // plasmic-import: DXi2tuunkH/component
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Tag from "../../Tag"; // plasmic-import: D4A_nzoplA/component
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import BackButton from "../../BackButton"; // plasmic-import: 4iL8_Fj5jz/component

import { useScreenVariants as useScreenVariantsqd2M7Fh1C7FCr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qd2M7fh1c7fCR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_martas_radical_website.module.css"; // plasmic-import: 7kHHtmp7kw7v5e6mQsr6wa/projectcss
import sty from "./PlasmicError417.module.css"; // plasmic-import: E4_3fcJKstM/css

createPlasmicElementProxy;

export type PlasmicError417__VariantMembers = {};
export type PlasmicError417__VariantsArgs = {};
type VariantPropType = keyof PlasmicError417__VariantsArgs;
export const PlasmicError417__VariantProps = new Array<VariantPropType>();

export type PlasmicError417__ArgsType = {
  expoSlug?: string;
};
type ArgPropType = keyof PlasmicError417__ArgsType;
export const PlasmicError417__ArgProps = new Array<ArgPropType>("expoSlug");

export type PlasmicError417__OverridesType = {
  body?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  exhibitionContainer?: Flex__<"div">;
  main?: Flex__<"main">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  container?: Flex__<"div">;
  heading?: Flex__<"div">;
  tag?: Flex__<typeof Tag>;
  cmsEntryImage?: Flex__<typeof CmsRowImage>;
  content?: Flex__<"p">;
  freeBox?: Flex__<"div">;
  images?: Flex__<"div">;
  backButton?: Flex__<typeof BackButton>;
};

export interface DefaultError417Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicError417__RenderFunc(props: {
  variants: PlasmicError417__VariantsArgs;
  args: PlasmicError417__ArgsType;
  overrides: PlasmicError417__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          expoSlug: undefined
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqd2M7Fh1C7FCr()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicError417.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicError417.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicError417.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicError417.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicError417.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicError417.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.body
          )}
        >
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            damping={0.5}
            delay={undefined}
            duration={1000}
            triggerOnce={true}
          >
            <div
              data-plasmic-name={"exhibitionContainer"}
              data-plasmic-override={overrides.exhibitionContainer}
              className={classNames(projectcss.all, sty.exhibitionContainer)}
            >
              <main
                data-plasmic-name={"main"}
                data-plasmic-override={overrides.main}
                className={classNames(projectcss.all, sty.main)}
              >
                <CmsQueryRepeater
                  data-plasmic-name={"cmsDataFetcher"}
                  data-plasmic-override={overrides.cmsDataFetcher}
                  className={classNames("__wab_instance", sty.cmsDataFetcher)}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nG82Q
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  filterField={"expoSlug"}
                  filterValue={"error-417-expectation-failed"}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={1}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__civNv
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"expos"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        data-plasmic-name={"container"}
                        data-plasmic-override={overrides.container}
                        className={classNames(projectcss.all, sty.container)}
                      >
                        <Ornament
                          className={classNames(
                            "__wab_instance",
                            sty.ornament__wDg5P
                          )}
                        />

                        <div
                          data-plasmic-name={"heading"}
                          data-plasmic-override={overrides.heading}
                          className={classNames(projectcss.all, sty.heading)}
                        >
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField___59VrM
                            )}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <Tag
                            data-plasmic-name={"tag"}
                            data-plasmic-override={overrides.tag}
                            className={classNames("__wab_instance", sty.tag)}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsExposItem.data.expoTag;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Writing";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </Tag>
                        </div>
                        <CmsRowImage
                          data-plasmic-name={"cmsEntryImage"}
                          data-plasmic-override={overrides.cmsEntryImage}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage
                          )}
                          srcProp={"src"}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__skz3Q)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "280px"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "auto"
                                : "700px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "auto"
                            }
                            src={
                              "https://studio.plasmic.app/static/img/placeholder-full.png"
                            }
                          />
                        </CmsRowImage>
                        <p
                          data-plasmic-name={"content"}
                          data-plasmic-override={overrides.content}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            sty.content
                          )}
                        >
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__fcHte
                            )}
                            field={"expoLocal"}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <div
                            data-plasmic-name={"freeBox"}
                            data-plasmic-override={overrides.freeBox}
                            className={classNames(projectcss.all, sty.freeBox)}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__bxoWm
                              )}
                              dateFormat={"MMM D, YYYY"}
                              field={"expoDataStart"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fxKnN
                              )}
                            >
                              {"\u2014"}
                            </div>
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__yj7Rm
                              )}
                              dateFormat={"MMM D, YYYY"}
                              field={"expoDataEnd"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />
                          </div>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__fxTx7
                            )}
                            field={"expoExcerto"}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />
                        </p>
                        <CmsRowField
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryField__hhob6
                          )}
                          field={"expoConteudo"}
                          themeResetClassName={classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens
                          )}
                        />

                        <div
                          data-plasmic-name={"images"}
                          data-plasmic-override={overrides.images}
                          className={classNames(projectcss.all, sty.images)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__bL11Y)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem1.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__j9Gz4)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "auto"
                                : "none"
                            }
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem2.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__t4Zg7)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem3.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__mcj2C)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem4.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___8VxYh)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem5.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__xLPyd)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem6.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__rJi9)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem7.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__yOpd2)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem8.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__iBk8F)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem9.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__oUt5W)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40vh"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "40vh"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "100%"
                                : "100%"
                            }
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsExposItem.data.expoSlider
                                  .expoSliderItem10.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </main>
              <Ornament
                bottom={true}
                className={classNames("__wab_instance", sty.ornament___1D10Z)}
              />

              <BackButton
                data-plasmic-name={"backButton"}
                data-plasmic-override={overrides.backButton}
                className={classNames("__wab_instance", sty.backButton)}
                targetAbout={true}
              />
            </div>
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "reveal",
    "exhibitionContainer",
    "main",
    "cmsDataFetcher",
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images",
    "backButton"
  ],
  reveal: [
    "reveal",
    "exhibitionContainer",
    "main",
    "cmsDataFetcher",
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images",
    "backButton"
  ],
  exhibitionContainer: [
    "exhibitionContainer",
    "main",
    "cmsDataFetcher",
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images",
    "backButton"
  ],
  main: [
    "main",
    "cmsDataFetcher",
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images"
  ],
  cmsDataFetcher: [
    "cmsDataFetcher",
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images"
  ],
  container: [
    "container",
    "heading",
    "tag",
    "cmsEntryImage",
    "content",
    "freeBox",
    "images"
  ],
  heading: ["heading", "tag"],
  tag: ["tag"],
  cmsEntryImage: ["cmsEntryImage"],
  content: ["content", "freeBox"],
  freeBox: ["freeBox"],
  images: ["images"],
  backButton: ["backButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  reveal: typeof Reveal;
  exhibitionContainer: "div";
  main: "main";
  cmsDataFetcher: typeof CmsQueryRepeater;
  container: "div";
  heading: "div";
  tag: typeof Tag;
  cmsEntryImage: typeof CmsRowImage;
  content: "p";
  freeBox: "div";
  images: "div";
  backButton: typeof BackButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicError417__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicError417__VariantsArgs;
    args?: PlasmicError417__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicError417__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicError417__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicError417__ArgProps,
          internalVariantPropNames: PlasmicError417__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicError417__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicError417";
  } else {
    func.displayName = `PlasmicError417.${nodeName}`;
  }
  return func;
}

export const PlasmicError417 = Object.assign(
  // Top-level PlasmicError417 renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    exhibitionContainer: makeNodeComponent("exhibitionContainer"),
    main: makeNodeComponent("main"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    container: makeNodeComponent("container"),
    heading: makeNodeComponent("heading"),
    tag: makeNodeComponent("tag"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    content: makeNodeComponent("content"),
    freeBox: makeNodeComponent("freeBox"),
    images: makeNodeComponent("images"),
    backButton: makeNodeComponent("backButton"),

    // Metadata about props expected for PlasmicError417
    internalVariantProps: PlasmicError417__VariantProps,
    internalArgProps: PlasmicError417__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Error 417: Expectation Failed",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/45f0ab1c21f0f763e8e2890c45d4df4f.png",
      canonical: "http://www.martaespiridiao.com"
    }
  }
);

export default PlasmicError417;
/* prettier-ignore-end */
