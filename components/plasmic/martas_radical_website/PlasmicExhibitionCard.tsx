// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7kHHtmp7kw7v5e6mQsr6wa
// Component: ww_7YrxOb5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsqd2M7Fh1C7FCr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qd2M7fh1c7fCR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_martas_radical_website.module.css"; // plasmic-import: 7kHHtmp7kw7v5e6mQsr6wa/projectcss
import sty from "./PlasmicExhibitionCard.module.css"; // plasmic-import: ww_7YrxOb5/css

createPlasmicElementProxy;

export type PlasmicExhibitionCard__VariantMembers = {};
export type PlasmicExhibitionCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicExhibitionCard__VariantsArgs;
export const PlasmicExhibitionCard__VariantProps = new Array<VariantPropType>();

export type PlasmicExhibitionCard__ArgsType = {
  exhibitionTitle?: React.ReactNode;
  exhibitionIntro?: React.ReactNode;
  date?: React.ReactNode;
  place?: React.ReactNode;
};
type ArgPropType = keyof PlasmicExhibitionCard__ArgsType;
export const PlasmicExhibitionCard__ArgProps = new Array<ArgPropType>(
  "exhibitionTitle",
  "exhibitionIntro",
  "date",
  "place"
);

export type PlasmicExhibitionCard__OverridesType = {
  root?: Flex__<"a"> & Partial<LinkProps>;
  cardContainer?: Flex__<"div">;
  image?: Flex__<"div">;
  details?: Flex__<"div">;
  text?: Flex__<"div">;
  info?: Flex__<"div">;
  datePlace?: Flex__<"div">;
};

export interface DefaultExhibitionCardProps {
  exhibitionTitle?: React.ReactNode;
  exhibitionIntro?: React.ReactNode;
  date?: React.ReactNode;
  place?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExhibitionCard__RenderFunc(props: {
  variants: PlasmicExhibitionCard__VariantsArgs;
  args: PlasmicExhibitionCard__ArgsType;
  overrides: PlasmicExhibitionCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqd2M7Fh1C7FCr()
  });

  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"cardContainer"}
        data-plasmic-override={overrides.cardContainer}
        className={classNames(projectcss.all, sty.cardContainer)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"image"}
          data-plasmic-override={overrides.image}
          hasGap={true}
          className={classNames(projectcss.all, sty.image)}
        />
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        hasGap={true}
        className={classNames(projectcss.all, sty.details)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Exhibition"}
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"info"}
          data-plasmic-override={overrides.info}
          hasGap={true}
          className={classNames(projectcss.all, sty.info)}
        >
          {renderPlasmicSlot({
            defaultContents: "Erro 417: expectativa Falhada",
            value: args.exhibitionTitle,
            className: classNames(sty.slotTargetExhibitionTitle)
          })}
          {renderPlasmicSlot({
            defaultContents:
              "Com: Alice dos Reis, Aliza Shvarts, Ana Hip\u00f3lito, Carlota B\u00f3ia Neto, Catarina Real, Daniela \u00c2ngelo, Elisa Azevedo, Gisela Casimiro, Hilda de Paulo, Jota Momba\u00e7a, Odete e Xavier Paes.",
            value: args.exhibitionIntro,
            className: classNames(sty.slotTargetExhibitionIntro)
          })}
          <div
            data-plasmic-name={"datePlace"}
            data-plasmic-override={overrides.datePlace}
            className={classNames(projectcss.all, sty.datePlace)}
          >
            {renderPlasmicSlot({
              defaultContents: "11.12.2021 \u2013 20.02.2022",
              value: args.date,
              className: classNames(sty.slotTargetDate)
            })}
            {renderPlasmicSlot({
              defaultContents: "Galeria Municipal do Porto",
              value: args.place,
              className: classNames(sty.slotTargetPlace)
            })}
          </div>
        </Stack__>
      </Stack__>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "cardContainer",
    "image",
    "details",
    "text",
    "info",
    "datePlace"
  ],
  cardContainer: ["cardContainer", "image"],
  image: ["image"],
  details: ["details", "text", "info", "datePlace"],
  text: ["text"],
  info: ["info", "datePlace"],
  datePlace: ["datePlace"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  cardContainer: "div";
  image: "div";
  details: "div";
  text: "div";
  info: "div";
  datePlace: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExhibitionCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExhibitionCard__VariantsArgs;
    args?: PlasmicExhibitionCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExhibitionCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExhibitionCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExhibitionCard__ArgProps,
          internalVariantPropNames: PlasmicExhibitionCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExhibitionCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExhibitionCard";
  } else {
    func.displayName = `PlasmicExhibitionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicExhibitionCard = Object.assign(
  // Top-level PlasmicExhibitionCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardContainer: makeNodeComponent("cardContainer"),
    image: makeNodeComponent("image"),
    details: makeNodeComponent("details"),
    text: makeNodeComponent("text"),
    info: makeNodeComponent("info"),
    datePlace: makeNodeComponent("datePlace"),

    // Metadata about props expected for PlasmicExhibitionCard
    internalVariantProps: PlasmicExhibitionCard__VariantProps,
    internalArgProps: PlasmicExhibitionCard__ArgProps
  }
);

export default PlasmicExhibitionCard;
/* prettier-ignore-end */
