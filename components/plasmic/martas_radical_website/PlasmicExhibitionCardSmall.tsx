// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7kHHtmp7kw7v5e6mQsr6wa
// Component: aYyZ3CnFHM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: dj_Vc2QmFA/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import { useScreenVariants as useScreenVariantsqd2M7Fh1C7FCr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qd2M7fh1c7fCR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_martas_radical_website.module.css"; // plasmic-import: 7kHHtmp7kw7v5e6mQsr6wa/projectcss
import sty from "./PlasmicExhibitionCardSmall.module.css"; // plasmic-import: aYyZ3CnFHM/css

import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: TE7eTcYpH1C/icon

export type PlasmicExhibitionCardSmall__VariantMembers = {};
export type PlasmicExhibitionCardSmall__VariantsArgs = {};
type VariantPropType = keyof PlasmicExhibitionCardSmall__VariantsArgs;
export const PlasmicExhibitionCardSmall__VariantProps =
  new Array<VariantPropType>();

export type PlasmicExhibitionCardSmall__ArgsType = {};
type ArgPropType = keyof PlasmicExhibitionCardSmall__ArgsType;
export const PlasmicExhibitionCardSmall__ArgProps = new Array<ArgPropType>();

export type PlasmicExhibitionCardSmall__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  cmsEntryImage?: p.Flex<typeof CmsRowImage>;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  p?: p.Flex<"p">;
  svg?: p.Flex<"svg">;
};

export interface DefaultExhibitionCardSmallProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicExhibitionCardSmall__RenderFunc(props: {
  variants: PlasmicExhibitionCardSmall__VariantsArgs;
  args: PlasmicExhibitionCardSmall__ArgsType;
  overrides: PlasmicExhibitionCardSmall__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqd2M7Fh1C7FCr()
  });

  return (
    true ? (
      <p.PlasmicLink
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
        component={Link}
        href={"martaespiridiao.com/error-417-expectation-failed" as const}
        platform={"nextjs"}
      >
        <CmsRowImage
          data-plasmic-name={"cmsEntryImage"}
          data-plasmic-override={overrides.cmsEntryImage}
          className={classNames("__wab_instance", sty.cmsEntryImage)}
          srcProp={"src" as const}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "tablet")
                ? ("15vh" as const)
                : ("20vh" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            src={
              "https://studio.plasmic.app/static/img/placeholder-full.png" as const
            }
          />
        </CmsRowImage>

        <CmsRowField
          className={classNames("__wab_instance", sty.cmsEntryField__xhShm)}
        />

        {true ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <CmsRowField
              className={classNames(
                "__wab_instance",
                sty.cmsEntryField___6Zvm2
              )}
              dateFormat={"MMMM D, YYYY" as const}
              field={"expoDataStart" as const}
            />

            <p
              data-plasmic-name={"p"}
              data-plasmic-override={overrides.p}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p
              )}
            >
              {"â€”"}
            </p>

            <CmsRowField
              className={classNames("__wab_instance", sty.cmsEntryField__cqhVo)}
              dateFormat={"MMMM D, YYYY" as const}
              field={"expoDataEnd" as const}
            />
          </div>
        ) : null}

        <CmsRowField
          className={classNames("__wab_instance", sty.cmsEntryField__iGuOm)}
          dateFormat={"MMMM D, YYYY" as const}
          field={"expoLocal" as const}
        />

        {true ? (
          <Icon38Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        ) : null}
      </p.PlasmicLink>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsEntryImage", "img", "freeBox", "p", "svg"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"],
  freeBox: ["freeBox", "p"],
  p: ["p"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  cmsEntryImage: typeof CmsRowImage;
  img: typeof p.PlasmicImg;
  freeBox: "div";
  p: "p";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExhibitionCardSmall__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExhibitionCardSmall__VariantsArgs;
    args?: PlasmicExhibitionCardSmall__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExhibitionCardSmall__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExhibitionCardSmall__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicExhibitionCardSmall__ArgProps,
          internalVariantPropNames: PlasmicExhibitionCardSmall__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicExhibitionCardSmall__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExhibitionCardSmall";
  } else {
    func.displayName = `PlasmicExhibitionCardSmall.${nodeName}`;
  }
  return func;
}

export const PlasmicExhibitionCardSmall = Object.assign(
  // Top-level PlasmicExhibitionCardSmall renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    p: makeNodeComponent("p"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicExhibitionCardSmall
    internalVariantProps: PlasmicExhibitionCardSmall__VariantProps,
    internalArgProps: PlasmicExhibitionCardSmall__ArgProps
  }
);

export default PlasmicExhibitionCardSmall;
/* prettier-ignore-end */
