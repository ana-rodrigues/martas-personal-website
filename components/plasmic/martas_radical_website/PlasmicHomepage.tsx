// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7kHHtmp7kw7v5e6mQsr6wa
// Component: -LpQrqaEn4zH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Navbar from "../../Navbar"; // plasmic-import: S3DCq_OZJ7/component
import Ornament from "../../Ornament"; // plasmic-import: DXi2tuunkH/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import ArticleCard from "../../ArticleCard"; // plasmic-import: FpGeBZ3fSu/component

import { useScreenVariants as useScreenVariantsqd2M7Fh1C7FCr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qd2M7fh1c7fCR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_martas_radical_website.module.css"; // plasmic-import: 7kHHtmp7kw7v5e6mQsr6wa/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: -LpQrqaEn4zH/css

import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: TE7eTcYpH1C/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  body?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  main?: Flex__<"main">;
  navbar?: Flex__<typeof Navbar>;
  top?: Flex__<"section">;
  hero?: Flex__<"section">;
  title?: Flex__<"div">;
  h1?: Flex__<"h1">;
  about?: Flex__<"section">;
  bio?: Flex__<"div">;
  textCols?: Flex__<"div">;
  exhibitionShortList?: Flex__<"div">;
  articles?: Flex__<"div">;
  articlesContent?: Flex__<"div">;
  articleCard?: Flex__<typeof ArticleCard>;
  navbarContainer?: Flex__<"nav">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqd2M7Fh1C7FCr()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.body
          )}
        >
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={true}
            className={classNames("__wab_instance", sty.reveal)}
            damping={undefined}
            delay={0}
            duration={1000}
            reverse={false}
            triggerOnce={false}
          >
            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <Navbar
                data-plasmic-name={"navbar"}
                data-plasmic-override={overrides.navbar}
                className={classNames("__wab_instance", sty.navbar)}
              />

              <section
                data-plasmic-name={"top"}
                data-plasmic-override={overrides.top}
                className={classNames(projectcss.all, sty.top)}
                id={"top"}
              >
                <Ornament
                  className={classNames("__wab_instance", sty.ornament__nnLqj)}
                />

                <section
                  data-plasmic-name={"hero"}
                  data-plasmic-override={overrides.hero}
                  className={classNames(projectcss.all, sty.hero)}
                  id={"top"}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.title)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ceFe
                      )}
                    >
                      {"Marta Espiridi\u00e3o"}
                    </div>
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Art curator \n& researcher"}
                    </h1>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__fQ7T)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "430px"
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? "600px"
                          : "760px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? "100%"
                          : "100%"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/martas_radical_website/images/_733Acf4D4486D5F9B7Cb29Af7Ad5C954JpgCopyJpg.jpg",
                        fullWidth: 744,
                        fullHeight: 984,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                </section>
              </section>
              <Stack__
                as={"section"}
                data-plasmic-name={"about"}
                data-plasmic-override={overrides.about}
                hasGap={true}
                className={classNames(projectcss.all, sty.about)}
                id={"about"}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"bio"}
                  data-plasmic-override={overrides.bio}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.bio)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__xyTtw
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__wfZn
                          )}
                        >
                          {"About"}
                        </h2>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </h2>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textCols"}
                    data-plasmic-override={overrides.textCols}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textCols)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dz673
                      )}
                    >
                      {
                        'Graduated in Sciences of Art and Heritage (Fine Arts, Lisbon), has a post-grad in Contemporary Art Studies and Curating from the Faculty of Letters of Lisbon, a Master in Sciences of Communication in FCSH Lisbon, and is currently a Ph.D. researcher in Transart Institute / Liverpool John Moores University, with the project "Feminist Killjoys: New Embodiments in Moving Image", and the recipient of a full FCT Ph.D Scholarship.'
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x60J1
                      )}
                    >
                      {
                        'Independent curator and researcher, created several independent curatorial projects, of which is highlighted "Bodies in Space - critical archive of non-normative experiences of the city" (Lisbon), a critical space to re-think the place of non-normative bodies within urban landscapes, how they relate to common surroundings, and in what ways the city exerts discriminatory violence over identities and bodies.'
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"exhibitionShortList"}
                  data-plasmic-override={overrides.exhibitionShortList}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.exhibitionShortList
                  )}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__bpwHx
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__sXg7Q
                          )}
                        >
                          {"Exhibitions"}
                        </h2>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </h2>
                  <CmsQueryRepeater
                    className={classNames(
                      "__wab_instance",
                      sty.cmsDataFetcher__aGazh
                    )}
                    desc={true}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ld9Qd
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    filterField={"expoSlug"}
                    filterValue={"error-417-expectation-failed"}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bmohW
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    mode={"rows"}
                    noAutoRepeat={false}
                    noLayout={false}
                    orderBy={"expoDataStart"}
                    table={"expos"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__hUsoV
                          )}
                          component={Link}
                          href={`/error-417-expectation-failed`}
                          platform={"nextjs"}
                        >
                          <CmsRowImage
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryImage__xCw02
                            )}
                            srcProp={"src"}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__lOfoz)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "25vh"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tablet"
                                    )
                                  ? "15vh"
                                  : "20vh"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              src={
                                "https://studio.plasmic.app/static/img/placeholder-full.png"
                              }
                            />
                          </CmsRowImage>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__zrRG
                            )}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mdSsW
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__vrj8T
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataStart"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />

                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__znCs8
                              )}
                            >
                              {"\u2014"}
                            </p>
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField___1O2Ub
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataEnd"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />
                          </div>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField___95ZFv
                            )}
                            dateFormat={"MMMM D, YYYY"}
                            field={"expoLocal"}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2Gzpg
                            )}
                            role={"img"}
                          />
                        </PlasmicLink__>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                  <CmsQueryRepeater
                    className={classNames(
                      "__wab_instance",
                      sty.cmsDataFetcher__qzE2Z
                    )}
                    desc={true}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eqIs
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    filterField={"expoSlug"}
                    filterValue={"sonic-materialities-andreia-santana"}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1X8Uk
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    orderBy={"expoDataStart"}
                    table={"expos"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___6ZGdz
                          )}
                          component={Link}
                          href={`/sonic-materialities-andreia-santana`}
                          platform={"nextjs"}
                        >
                          <CmsRowImage
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryImage__nMgBv
                            )}
                            srcProp={"src"}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__feZx4)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "25vh"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tablet"
                                    )
                                  ? "15vh"
                                  : "20vh"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              src={
                                "https://studio.plasmic.app/static/img/placeholder-full.png"
                              }
                            />
                          </CmsRowImage>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__sLkh7
                            )}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oiDy
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__t030E
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataStart"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />

                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__xbnjH
                              )}
                            >
                              {"\u2014"}
                            </p>
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__tz1Yq
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataEnd"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />
                          </div>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__pmw8
                            )}
                            dateFormat={"MMMM D, YYYY"}
                            field={"expoLocal"}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yijF
                            )}
                            role={"img"}
                          />
                        </PlasmicLink__>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                  <CmsQueryRepeater
                    className={classNames(
                      "__wab_instance",
                      sty.cmsDataFetcher__miXc0
                    )}
                    desc={true}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ka7H3
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    filterField={"expoSlug"}
                    filterValue={"at-night-all-cats"}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fXUe
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    mode={"rows"}
                    noAutoRepeat={false}
                    noLayout={false}
                    orderBy={"expoDataStart"}
                    table={"expos"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__rHtm6
                          )}
                          component={Link}
                          href={`/at-night-all-cats`}
                          platform={"nextjs"}
                        >
                          <CmsRowImage
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryImage__r5Rs5
                            )}
                            srcProp={"src"}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__adUm)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "25vh"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tablet"
                                    )
                                  ? "15vh"
                                  : "20vh"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              src={
                                "https://studio.plasmic.app/static/img/placeholder-full.png"
                              }
                            />
                          </CmsRowImage>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__s7US
                            )}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__alZnX
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__hoGsK
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataStart"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />

                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__trd3I
                              )}
                            >
                              {"\u2014"}
                            </p>
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__efYg7
                              )}
                              dateFormat={"MMMM D, YYYY"}
                              field={"expoDataEnd"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens
                              )}
                            />
                          </div>
                          <CmsRowField
                            className={classNames(
                              "__wab_instance",
                              sty.cmsEntryField__xbYic
                            )}
                            dateFormat={"MMMM D, YYYY"}
                            field={"expoLocal"}
                            themeResetClassName={classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens
                            )}
                          />

                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iB2Mk
                            )}
                            role={"img"}
                          />
                        </PlasmicLink__>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                </Stack__>
              </Stack__>
              <div
                data-plasmic-name={"articles"}
                data-plasmic-override={overrides.articles}
                className={classNames(projectcss.all, sty.articles)}
              >
                <div
                  data-plasmic-name={"articlesContent"}
                  data-plasmic-override={overrides.articlesContent}
                  className={classNames(projectcss.all, sty.articlesContent)}
                  id={"articles"}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__evHOn
                    )}
                  >
                    {"Writing"}
                  </h2>
                  <CmsQueryRepeater
                    className={classNames(
                      "__wab_instance",
                      sty.cmsDataFetcher__mrYoZ
                    )}
                    desc={false}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yLc2Z
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pk0Kf
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    table={"artigo"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <ArticleCard
                          data-plasmic-name={"articleCard"}
                          data-plasmic-override={overrides.articleCard}
                          className={classNames(
                            "__wab_instance",
                            sty.articleCard
                          )}
                        />
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                </div>
                <Ornament
                  bottom={true}
                  className={classNames("__wab_instance", sty.ornament___0ABtm)}
                />
              </div>
              <Stack__
                as={"nav"}
                data-plasmic-name={"navbarContainer"}
                data-plasmic-override={overrides.navbarContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.navbarContainer)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___89Va
                  )}
                  component={Link}
                  href={'mailto:"martaespiridiaov@gmail.com"'}
                  platform={"nextjs"}
                  target={undefined}
                >
                  {"Get in Touch"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wdnh7
                  )}
                  component={Link}
                  href={"https://independent.academia.edu/MartaEspiridi%C3%A3o"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {"Academia"}
                </PlasmicLink__>
              </Stack__>
            </main>
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "reveal",
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  reveal: [
    "reveal",
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  main: [
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  navbar: ["navbar"],
  top: ["top", "hero", "title", "h1"],
  hero: ["hero", "title", "h1"],
  title: ["title", "h1"],
  h1: ["h1"],
  about: ["about", "bio", "textCols", "exhibitionShortList"],
  bio: ["bio", "textCols"],
  textCols: ["textCols"],
  exhibitionShortList: ["exhibitionShortList"],
  articles: ["articles", "articlesContent", "articleCard"],
  articlesContent: ["articlesContent", "articleCard"],
  articleCard: ["articleCard"],
  navbarContainer: ["navbarContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  reveal: typeof Reveal;
  main: "main";
  navbar: typeof Navbar;
  top: "section";
  hero: "section";
  title: "div";
  h1: "h1";
  about: "section";
  bio: "div";
  textCols: "div";
  exhibitionShortList: "div";
  articles: "div";
  articlesContent: "div";
  articleCard: typeof ArticleCard;
  navbarContainer: "nav";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    top: makeNodeComponent("top"),
    hero: makeNodeComponent("hero"),
    title: makeNodeComponent("title"),
    h1: makeNodeComponent("h1"),
    about: makeNodeComponent("about"),
    bio: makeNodeComponent("bio"),
    textCols: makeNodeComponent("textCols"),
    exhibitionShortList: makeNodeComponent("exhibitionShortList"),
    articles: makeNodeComponent("articles"),
    articlesContent: makeNodeComponent("articlesContent"),
    articleCard: makeNodeComponent("articleCard"),
    navbarContainer: makeNodeComponent("navbarContainer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Marta Espiridião, Researcher and Curator",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/45f0ab1c21f0f763e8e2890c45d4df4f.png",
      canonical: "http://www.martaespiridiao.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
