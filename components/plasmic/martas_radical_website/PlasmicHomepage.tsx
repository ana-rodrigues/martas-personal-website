// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7kHHtmp7kw7v5e6mQsr6wa
// Component: -LpQrqaEn4zH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Navbar from "../../Navbar"; // plasmic-import: S3DCq_OZJ7/component
import Ornament from "../../Ornament"; // plasmic-import: DXi2tuunkH/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: dj_Vc2QmFA/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent
import ArticleCard from "../../ArticleCard"; // plasmic-import: FpGeBZ3fSu/component

import { useScreenVariants as useScreenVariantsqd2M7Fh1C7FCr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qd2M7fh1c7fCR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_martas_radical_website.module.css"; // plasmic-import: 7kHHtmp7kw7v5e6mQsr6wa/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: -LpQrqaEn4zH/css

import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: TE7eTcYpH1C/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  body?: p.Flex<"div">;
  reveal?: p.Flex<typeof Reveal>;
  main?: p.Flex<"main">;
  navbar?: p.Flex<typeof Navbar>;
  top?: p.Flex<"section">;
  hero?: p.Flex<"section">;
  title?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  about?: p.Flex<"section">;
  bio?: p.Flex<"div">;
  textCols?: p.Flex<"div">;
  exhibitionShortList?: p.Flex<"div">;
  articles?: p.Flex<"div">;
  articlesContent?: p.Flex<"div">;
  articleCard?: p.Flex<typeof ArticleCard>;
  navbarContainer?: p.Flex<"nav">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqd2M7Fh1C7FCr()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.body
          )}
        >
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={true}
            className={classNames("__wab_instance", sty.reveal)}
            damping={undefined}
            delay={0 as const}
            duration={1000 as const}
            reverse={false}
            triggerOnce={false}
          >
            {true ? (
              <main
                data-plasmic-name={"main"}
                data-plasmic-override={overrides.main}
                className={classNames(projectcss.all, sty.main)}
              >
                {true ? (
                  <Navbar
                    data-plasmic-name={"navbar"}
                    data-plasmic-override={overrides.navbar}
                    className={classNames("__wab_instance", sty.navbar)}
                  />
                ) : null}
                {true ? (
                  <section
                    data-plasmic-name={"top"}
                    data-plasmic-override={overrides.top}
                    className={classNames(projectcss.all, sty.top)}
                    id={"top" as const}
                  >
                    <Ornament
                      className={classNames(
                        "__wab_instance",
                        sty.ornament__nnLqj
                      )}
                    />

                    {true ? (
                      <section
                        data-plasmic-name={"hero"}
                        data-plasmic-override={overrides.hero}
                        className={classNames(projectcss.all, sty.hero)}
                        id={"top" as const}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"title"}
                          data-plasmic-override={overrides.title}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.title)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ceFe
                            )}
                          >
                            {"Marta Espiridi√£o"}
                          </div>

                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            {"Art curator \n& researcher"}
                          </h1>

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__fQ7T)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? ("600px" as const)
                                : ("890px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? ("100%" as const)
                                : ("100%" as const)
                            }
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/martas_radical_website/images/_733Acf4D4486D5F9B7Cb29Af7Ad5C954JpgCopyjpg.jpeg",
                              fullWidth: 744,
                              fullHeight: 984,
                              aspectRatio: undefined
                            }}
                          />
                        </p.Stack>
                      </section>
                    ) : null}
                  </section>
                ) : null}

                <p.Stack
                  as={"section"}
                  data-plasmic-name={"about"}
                  data-plasmic-override={overrides.about}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.about)}
                  id={"about" as const}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"bio"}
                      data-plasmic-override={overrides.bio}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.bio)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__xyTtw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__wfZn
                              )}
                            >
                              {"About"}
                            </h2>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h2>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"textCols"}
                          data-plasmic-override={overrides.textCols}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.textCols)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dz673
                            )}
                          >
                            {
                              'Graduated in Sciences of Art and Heritage (Fine Arts, Lisbon), has a post-grad in Contemporary Art Studies and Curating from the Faculty of Letters of Lisbon, a Master in Sciences of Communication in FCSH Lisbon, and is currently starting a Ph.D. program in Transart Institute with the research project "Feminist Killjoys: New Embodiments in Moving Image".'
                            }
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x60J1
                            )}
                          >
                            {
                              'Independent curator and researcher, created several independent curatorial projects, of which is highlighted "Bodies in Space - critical archive of non-normative experiences of the city" (Lisbon), a critical space to re-think the place of non-normative bodies within urban landscapes, how they relate to common surroundings, and in what ways the city exerts discriminatory violence over identities and bodies.'
                            }
                          </div>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"exhibitionShortList"}
                      data-plasmic-override={overrides.exhibitionShortList}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.exhibitionShortList
                      )}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__bpwHx
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__sXg7Q
                              )}
                            >
                              {"Exhibitions"}
                            </h2>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h2>

                      <CmsQueryRepeater
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataLoader__aGazh
                        )}
                        desc={true}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bGeYl
                                )}
                              >
                                {"No matching published entries found."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        filterField={"expoSlug" as const}
                        filterValue={"error-417-expectation-failed" as const}
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0 as const}
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wiYbY
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        noAutoRepeat={false}
                        noLayout={false}
                        orderBy={"expoDataStart" as const}
                        useDraft={false}
                      >
                        <ph.DataCtxReader>
                          {$ctx =>
                            true ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__hUsoV
                                )}
                                component={Link}
                                href={`/error-417-expectation-failed`}
                                platform={"nextjs"}
                              >
                                <CmsRowImage
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryImage__xCw02
                                  )}
                                  srcProp={"src" as const}
                                >
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__lOfoz)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tablet"
                                      )
                                        ? ("15vh" as const)
                                        : ("20vh" as const)
                                    }
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"none" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"auto" as const}
                                    src={
                                      "https://studio.plasmic.app/static/img/placeholder-full.png" as const
                                    }
                                  />
                                </CmsRowImage>

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__zrRG
                                  )}
                                />

                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mdSsW
                                    )}
                                  >
                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField__vrj8T
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataStart" as const}
                                    />

                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__znCs8
                                      )}
                                    >
                                      {"‚Äî"}
                                    </p>

                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField___1O2Ub
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataEnd" as const}
                                    />
                                  </div>
                                ) : null}

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField___95ZFv
                                  )}
                                  dateFormat={"MMMM D, YYYY" as const}
                                  field={"expoLocal" as const}
                                />

                                {true ? (
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___2Gzpg
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </p.PlasmicLink>
                            ) : null
                          }
                        </ph.DataCtxReader>
                      </CmsQueryRepeater>

                      <CmsQueryRepeater
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataLoader__qzE2Z
                        )}
                        desc={true}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__th2E0
                                )}
                              >
                                {"No matching published entries found."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        filterField={"expoSlug" as const}
                        filterValue={
                          "sonic-materialities-andreia-santana" as const
                        }
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0 as const}
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fRFrH
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        noAutoRepeat={false}
                        noLayout={false}
                        orderBy={"expoDataStart" as const}
                        useDraft={false}
                      >
                        <ph.DataCtxReader>
                          {$ctx =>
                            true ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link___6ZGdz
                                )}
                                component={Link}
                                href={`/sonic-materialities-andreia-santana`}
                                platform={"nextjs"}
                              >
                                <CmsRowImage
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryImage__nMgBv
                                  )}
                                  srcProp={"src" as const}
                                >
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__feZx4)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tablet"
                                      )
                                        ? ("15vh" as const)
                                        : ("20vh" as const)
                                    }
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"none" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"auto" as const}
                                    src={
                                      "https://studio.plasmic.app/static/img/placeholder-full.png" as const
                                    }
                                  />
                                </CmsRowImage>

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__sLkh7
                                  )}
                                />

                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oiDy
                                    )}
                                  >
                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField__t030E
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataStart" as const}
                                    />

                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__xbnjH
                                      )}
                                    >
                                      {"‚Äî"}
                                    </p>

                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField__tz1Yq
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataEnd" as const}
                                    />
                                  </div>
                                ) : null}

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__pmw8
                                  )}
                                  dateFormat={"MMMM D, YYYY" as const}
                                  field={"expoLocal" as const}
                                />

                                {true ? (
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yijF
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </p.PlasmicLink>
                            ) : null
                          }
                        </ph.DataCtxReader>
                      </CmsQueryRepeater>

                      <CmsQueryRepeater
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataLoader__miXc0
                        )}
                        desc={true}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__leKtX
                                )}
                              >
                                {"No matching published entries found."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        filterField={"expoSlug" as const}
                        filterValue={"at-night-all-cats" as const}
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0 as const}
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dCby
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        noAutoRepeat={false}
                        noLayout={false}
                        orderBy={"expoDataStart" as const}
                        useDraft={false}
                      >
                        <ph.DataCtxReader>
                          {$ctx =>
                            true ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__rHtm6
                                )}
                                component={Link}
                                href={`/at-night-all-cats`}
                                platform={"nextjs"}
                              >
                                <CmsRowImage
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryImage__r5Rs5
                                  )}
                                  srcProp={"src" as const}
                                >
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__adUm)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tablet"
                                      )
                                        ? ("15vh" as const)
                                        : ("20vh" as const)
                                    }
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"none" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"auto" as const}
                                    src={
                                      "https://studio.plasmic.app/static/img/placeholder-full.png" as const
                                    }
                                  />
                                </CmsRowImage>

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__s7US
                                  )}
                                />

                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__alZnX
                                    )}
                                  >
                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField__hoGsK
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataStart" as const}
                                    />

                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__trd3I
                                      )}
                                    >
                                      {"‚Äî"}
                                    </p>

                                    <CmsRowField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField__efYg7
                                      )}
                                      dateFormat={"MMMM D, YYYY" as const}
                                      field={"expoDataEnd" as const}
                                    />
                                  </div>
                                ) : null}

                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__xbYic
                                  )}
                                  dateFormat={"MMMM D, YYYY" as const}
                                  field={"expoLocal" as const}
                                />

                                {true ? (
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__iB2Mk
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </p.PlasmicLink>
                            ) : null
                          }
                        </ph.DataCtxReader>
                      </CmsQueryRepeater>
                    </p.Stack>
                  ) : null}
                </p.Stack>

                {true ? (
                  <div
                    data-plasmic-name={"articles"}
                    data-plasmic-override={overrides.articles}
                    className={classNames(projectcss.all, sty.articles)}
                  >
                    <div
                      data-plasmic-name={"articlesContent"}
                      data-plasmic-override={overrides.articlesContent}
                      className={classNames(
                        projectcss.all,
                        sty.articlesContent
                      )}
                      id={"articles" as const}
                    >
                      {true ? (
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__evHOn
                          )}
                        >
                          {"Writing"}
                        </h2>
                      ) : null}

                      <CmsQueryRepeater
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataLoader__mrYoZ
                        )}
                        desc={false}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1PDPf
                                )}
                              >
                                {"No matching published entries found."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0 as const}
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dRu26
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        noAutoRepeat={false}
                        noLayout={false}
                        table={"artigo" as const}
                        useDraft={false}
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <ArticleCard
                              data-plasmic-name={"articleCard"}
                              data-plasmic-override={overrides.articleCard}
                              className={classNames(
                                "__wab_instance",
                                sty.articleCard
                              )}
                            />
                          )}
                        </ph.DataCtxReader>
                      </CmsQueryRepeater>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Ornament
                        bottom={true}
                        className={classNames(
                          "__wab_instance",
                          sty.ornament___0ABtm
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"nav"}
                    data-plasmic-name={"navbarContainer"}
                    data-plasmic-override={overrides.navbarContainer}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navbarContainer)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___89Va
                      )}
                      component={Link}
                      href={'mailto:"martaespiridiaov@gmail.com"' as const}
                      platform={"nextjs"}
                      target={undefined}
                    >
                      {"Get in Touch"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__wdnh7
                      )}
                      component={Link}
                      href={
                        "https://independent.academia.edu/MartaEspiridi%C3%A3o" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Academia"}
                    </p.PlasmicLink>
                  </p.Stack>
                ) : null}
              </main>
            ) : null}
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "reveal",
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  reveal: [
    "reveal",
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  main: [
    "main",
    "navbar",
    "top",
    "hero",
    "title",
    "h1",
    "about",
    "bio",
    "textCols",
    "exhibitionShortList",
    "articles",
    "articlesContent",
    "articleCard",
    "navbarContainer"
  ],
  navbar: ["navbar"],
  top: ["top", "hero", "title", "h1"],
  hero: ["hero", "title", "h1"],
  title: ["title", "h1"],
  h1: ["h1"],
  about: ["about", "bio", "textCols", "exhibitionShortList"],
  bio: ["bio", "textCols"],
  textCols: ["textCols"],
  exhibitionShortList: ["exhibitionShortList"],
  articles: ["articles", "articlesContent", "articleCard"],
  articlesContent: ["articlesContent", "articleCard"],
  articleCard: ["articleCard"],
  navbarContainer: ["navbarContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  reveal: typeof Reveal;
  main: "main";
  navbar: typeof Navbar;
  top: "section";
  hero: "section";
  title: "div";
  h1: "h1";
  about: "section";
  bio: "div";
  textCols: "div";
  exhibitionShortList: "div";
  articles: "div";
  articlesContent: "div";
  articleCard: typeof ArticleCard;
  navbarContainer: "nav";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    top: makeNodeComponent("top"),
    hero: makeNodeComponent("hero"),
    title: makeNodeComponent("title"),
    h1: makeNodeComponent("h1"),
    about: makeNodeComponent("about"),
    bio: makeNodeComponent("bio"),
    textCols: makeNodeComponent("textCols"),
    exhibitionShortList: makeNodeComponent("exhibitionShortList"),
    articles: makeNodeComponent("articles"),
    articlesContent: makeNodeComponent("articlesContent"),
    articleCard: makeNodeComponent("articleCard"),
    navbarContainer: makeNodeComponent("navbarContainer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Marta Espiridi√£o, Researcher and Curator",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/45f0ab1c21f0f763e8e2890c45d4df4f.png",
      canonical: "http://www.martaespiridiao.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
